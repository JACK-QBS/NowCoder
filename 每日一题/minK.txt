
// n个数里最小的K个

import java.util.*;
import java.io.BufferedReader;
import java.io.FileFilter;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main{
   public static int[] calculate(int[] nums, int n) {
        PriorityQueue<Integer> queue = new PriorityQueue<Integer>(n, new Comparator<Integer>() {
            public int compare(Integer o1, Integer o2) {
                return o2-o1;
            }
        });
        int[] results = new int[n];
        for(int i = 0 ; i < n ; i++)
            queue.offer(nums[i]);
         
        for(int i = n ; i < nums.length ; i++)
        {
            if(nums[i] < queue.peek())
            {
                queue.poll();
                queue.offer(nums[i]);
            }
        }
        int i = n-1;
        while(!queue.isEmpty())
        {
            results[i--] = queue.poll();
        }
        return results;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String line = null;
        while ((line = br.readLine()) != null) {
            String[] split = line.trim().split(" ");
            int[] nums = new int[split.length-1];
            for (int i = 0; i < nums.length; i++) {
                nums[i] = Integer.parseInt(split[i]);
            }
            int n = Integer.parseInt(split[split.length -1 ]);
            int[] out = calculate(nums, n);
            String output = "";
            for(int number : out)
            {
                output += number + " ";
            }
            System.out.println(output.trim());
        }
    }
}
